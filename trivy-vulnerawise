#!/bin/sh
# trivy-vulnerawise â€“ Portable across Linux and macOS
# This script invokes Trivy to scan (repo/image/sbom or Kubernetes resources via kubectl/oc),
# then pipes the JSON output to "vulnerawise check --scan-results -".

set -e

usage() {
  cat << 'EOS' >&2
Usage:
  trivy vulnerawise repo|image|sbom <target> [trivy options]
  trivy vulnerawise kube <resource_type> <resource_name> [kubectl/oc options] [trivy options]

Examples:
  trivy vulnerawise image nginx:latest
  trivy vulnerawise repo github.com/ralvares/santa
  trivy vulnerawise kube deployment visa-processor -n payments --severity HIGH
EOS
  exit 1
}

# Require at least 2 arguments for non-kube or 3 for kube mode.
if [ "$1" = "kube" ]; then
  [ $# -lt 3 ] && usage
else
  [ $# -lt 2 ] && usage
fi

# Initialize variables.
TRIVY_ARGS=""
KUBECTL_ARGS=""

if [ "$1" = "kube" ]; then
  # Kubernetes mode: expect "kube <resource_type> <resource_name>"
  TYPE="kube"
  RESOURCE_TYPE=$2
  RESOURCE_NAME=$3
  shift 3
  # Parse remaining arguments:
  # - Flags -n/--namespace go to KUBECTL_ARGS.
  # Everything else goes to TRIVY_ARGS.
  while [ $# -gt 0 ]; do
    case "$1" in
      -n|--namespace)
        KUBECTL_ARGS="$KUBECTL_ARGS $1"
        shift
        KUBECTL_ARGS="$KUBECTL_ARGS $1"
        ;;
      *)
        TRIVY_ARGS="$TRIVY_ARGS $1"
        ;;
    esac
    shift
  done
else
  # Non-kube modes: TYPE is one of repo, image, or sbom.
  TYPE=$1
  TARGET=$2
  shift 2
  while [ $# -gt 0 ]; do
    TRIVY_ARGS="$TRIVY_ARGS $1"
    shift
  done
fi

# Helper: run vulnerawise check with scan results from stdin.
run_audit() {
  vulnerawise check --scan-results -
}

# Helper: choose kubectl or oc.
kube_cmd() {
  if command -v kubectl >/dev/null 2>&1; then
    echo "kubectl"
  elif command -v oc >/dev/null 2>&1; then
    echo "oc"
  else
    echo "Neither kubectl nor oc found in PATH" >&2
    exit 1
  fi
}

# --- Kubernetes Mode ---
if [ "$TYPE" = "kube" ]; then
  CMD=$(kube_cmd)
  images=$($CMD get "$RESOURCE_TYPE" "$RESOURCE_NAME" $KUBECTL_ARGS -o yaml | \
           awk '/^[[:space:]]*image:/ {print $2}' | sort -u)
  if [ -z "$images" ]; then
    echo "No images found in $RESOURCE_TYPE/$RESOURCE_NAME"
    exit 1
  fi
  echo "$images" | while read -r image; do
    if [ -n "$image" ]; then
      trivy image $TRIVY_ARGS "$image" --format json | run_audit
    fi
  done
  exit 0
fi

# --- Non-Kubernetes Modes ---
case "$TYPE" in
  repo)
    trivy repository "$TARGET" $TRIVY_ARGS --format json | run_audit
    ;;
  image)
    trivy image "$TARGET" $TRIVY_ARGS --format json | run_audit
    ;;
  sbom)
    trivy sbom --input "$TARGET" $TRIVY_ARGS --format json | run_audit
    ;;
  *)
    echo "Unknown type: $TYPE"
    usage
    ;;
esac

